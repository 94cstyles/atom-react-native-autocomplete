{
  "tags": {
    "queue": [
      "ActivityIndicatorIOS",
      "DatePickerIOS",
      "DrawerLayoutAndroid",
      "Image",
      "ListView",
      "MapView",
      "Modal",
      "Navigator",
      "NavigatorIOS",
      "Picker",
      "PickerIOS",
      "ProgressBarAndroid",
      "ProgressViewIOS",
      "RefreshControl",
      "ScrollView",
      "SegmentedControlIOS",
      "Slider",
      "SliderIOS",
      "StatusBar",
      "Switch",
      "TabBarIOS",
      "TabBarIOS.Item",
      "Text",
      "TextInput",
      "ToolbarAndroid",
      "TouchableHighlight",
      "TouchableNativeFeedback",
      "TouchableOpacity",
      "TouchableWithoutFeedback",
      "View",
      "ViewPagerAndroid",
      "WebView"
    ],
    "completions": [
      {
        "displayText": "ActivityIndicatorIOS",
        "snippet": "ActivityIndicatorIOS$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "DatePickerIOS",
        "snippet": "DatePickerIOS$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "DrawerLayoutAndroid",
        "snippet": "DrawerLayoutAndroid$1>\n</DrawerLayoutAndroid>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "Image",
        "snippet": "Image$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "ListView",
        "snippet": "ListView$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "MapView",
        "snippet": "MapView$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "Modal",
        "snippet": "Modal$1>\n</Modal>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "Navigator",
        "snippet": "Navigator$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "NavigatorIOS",
        "snippet": "NavigatorIOS$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "Picker",
        "snippet": "Picker$1>\n</Picker>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "PickerIOS",
        "snippet": "PickerIOS$1>\n</PickerIOS>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "ProgressBarAndroid",
        "snippet": "ProgressBarAndroid$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "ProgressViewIOS",
        "snippet": "ProgressViewIOS$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "RefreshControl",
        "snippet": "RefreshControl$1>\n</RefreshControl>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "ScrollView",
        "snippet": "ScrollView$1>\n</ScrollView>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "SegmentedControlIOS",
        "snippet": "SegmentedControlIOS$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "Slider",
        "snippet": "Slider$1>\n</Slider>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "SliderIOS",
        "snippet": "SliderIOS$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "StatusBar",
        "snippet": "StatusBar$1>\n</StatusBar>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "Switch",
        "snippet": "Switch$1>\n</Switch>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "TabBarIOS",
        "snippet": "TabBarIOS$1>\n</TabBarIOS>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "TabBarIOS.Item",
        "snippet": "TabBarIOS.Item$1>\n</TabBarIOS.Item>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "Text",
        "snippet": "Text$1>\n</Text>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "TextInput",
        "snippet": "TextInput$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "ToolbarAndroid",
        "snippet": "ToolbarAndroid$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "TouchableHighlight",
        "snippet": "TouchableHighlight$1>\n</TouchableHighlight>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "TouchableNativeFeedback",
        "snippet": "TouchableNativeFeedback$1>\n</TouchableNativeFeedback>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "TouchableOpacity",
        "snippet": "TouchableOpacity$1>\n</TouchableOpacity>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "TouchableWithoutFeedback",
        "snippet": "TouchableWithoutFeedback$1>\n</TouchableWithoutFeedback>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "View",
        "snippet": "View$1>\n</View>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "ViewPagerAndroid",
        "snippet": "ViewPagerAndroid$1>\n</ViewPagerAndroid>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "WebView",
        "snippet": "WebView$1/>",
        "type": "tag",
        "rightLabelHTML": "react-native"
      }
    ]
  },
  "attributes": {
    "Slider": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "disabled",
        "snippet": "disabled={$1}",
        "type": "attribute",
        "description": "If true the user won&apos;t be able to move the slider.Default value is false.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#disabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "maximumTrackImage",
        "snippet": "maximumTrackImage={$1}",
        "type": "attribute",
        "description": "Assigns a maximum track image. Only static images are supported. Theleftmost pix",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#maximumtrackimage",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "maximumTrackTintColor",
        "snippet": "maximumTrackTintColor=\"$1\"",
        "type": "attribute",
        "description": "The color used for the track to the right of the button. Overrides thedefault bl",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#maximumtracktintcolor",
        "leftLabelHTML": "ios:string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "maximumValue",
        "snippet": "maximumValue={$1}",
        "type": "attribute",
        "description": "Initial maximum value of the slider. Default value is 1.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#maximumvalue",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "minimumTrackImage",
        "snippet": "minimumTrackImage={$1}",
        "type": "attribute",
        "description": "Assigns a minimum track image. Only static images are supported. Therightmost pi",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#minimumtrackimage",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "minimumTrackTintColor",
        "snippet": "minimumTrackTintColor=\"$1\"",
        "type": "attribute",
        "description": "The color used for the track to the left of the button. Overrides thedefault blu",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#minimumtracktintcolor",
        "leftLabelHTML": "ios:string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "minimumValue",
        "snippet": "minimumValue={$1}",
        "type": "attribute",
        "description": "Initial minimum value of the slider. Default value is 0.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#minimumvalue",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onSlidingComplete",
        "snippet": "onSlidingComplete={$1}",
        "type": "attribute",
        "description": "Callback called when the user finishes changing the value (e.g. whenthe slider i",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#onslidingcomplete",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onValueChange",
        "snippet": "onValueChange={$1}",
        "type": "attribute",
        "description": "Callback continuously called while the user is dragging the slider.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#onvaluechange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "step",
        "snippet": "step={$1}",
        "type": "attribute",
        "description": "Step value of the slider. The value should bebetween 0 and (maximumValue - minim",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#step",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "thumbImage",
        "snippet": "thumbImage={$1}",
        "type": "attribute",
        "description": "Sets an image for the thumb. Only static images are supported.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#thumbimage",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "trackImage",
        "snippet": "trackImage={$1}",
        "type": "attribute",
        "description": "Assigns a single image for the track. Only static images are supported.The cente",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#trackimage",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "value",
        "snippet": "value={$1}",
        "type": "attribute",
        "description": "Initial value of the slider. The value should be between minimumValueand maximum",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/slider.html#value",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      }
    ],
    "ActivityIndicatorIOS": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "animating",
        "snippet": "animating={$1}",
        "type": "attribute",
        "description": "Whether to show the indicator (true, the default) or hide it (false).",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/activityindicatorios.html#animating",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "color",
        "snippet": "color=\"$1\"",
        "type": "attribute",
        "description": "The foreground color of the spinner (default is gray).",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/activityindicatorios.html#color",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hidesWhenStopped",
        "snippet": "hidesWhenStopped={$1}",
        "type": "attribute",
        "description": "Whether the indicator should hide when not animating (true by default).",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/activityindicatorios.html#hideswhenstopped",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "size",
        "snippet": "size=\"$1\"",
        "type": "attribute",
        "description": "Size of the indicator. Small has a height of 20, large has a height of 36.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/activityindicatorios.html#size",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      }
    ],
    "DrawerLayoutAndroid": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "closeDrawer()",
        "type": "method",
        "description": "Closes the drawer.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#closedrawer",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "drawerBackgroundColor",
        "snippet": "drawerBackgroundColor={$1}",
        "type": "attribute",
        "description": "Specifies the background color of the drawer. The default value is white.If you ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#drawerbackgroundcolor",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "drawerLockMode",
        "snippet": "drawerLockMode=\"$1\"",
        "type": "attribute",
        "description": "Specifies the lock mode of the drawer. The drawer can be locked in 3 states:- un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#drawerlockmode",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "drawerPosition",
        "snippet": "drawerPosition=\"$1\"",
        "type": "attribute",
        "description": "Specifies the side of the screen from which the drawer will slide in.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#drawerposition",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "drawerWidth",
        "snippet": "drawerWidth={$1}",
        "type": "attribute",
        "description": "Specifies the width of the drawer, more precisely the width of the view that be ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#drawerwidth",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "keyboardDismissMode",
        "snippet": "keyboardDismissMode=\"$1\"",
        "type": "attribute",
        "description": "Determines whether the keyboard gets dismissed in response to a drag.  - &apos;n",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#keyboarddismissmode",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onDrawerClose",
        "snippet": "onDrawerClose={$1}",
        "type": "attribute",
        "description": "Function called whenever the navigation view has been closed.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#ondrawerclose",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onDrawerOpen",
        "snippet": "onDrawerOpen={$1}",
        "type": "attribute",
        "description": "Function called whenever the navigation view has been opened.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#ondraweropen",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onDrawerSlide",
        "snippet": "onDrawerSlide={$1}",
        "type": "attribute",
        "description": "Function called whenever there is an interaction with the navigation view.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#ondrawerslide",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onDrawerStateChanged",
        "snippet": "onDrawerStateChanged={$1}",
        "type": "attribute",
        "description": "Function called when the drawer state has changed. The drawer can be in 3 states",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#ondrawerstatechanged",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "openDrawer()",
        "type": "method",
        "description": "Opens the drawer.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#opendrawer",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderNavigationView",
        "snippet": "renderNavigationView={$1}",
        "type": "attribute",
        "description": "The navigation view that will be rendered to the side of the screen and can be p",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#rendernavigationview",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "statusBarBackgroundColor",
        "snippet": "statusBarBackgroundColor={$1}",
        "type": "attribute",
        "description": "Make the drawer take the entire screen and draw the background of thestatus bar ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/drawerlayoutandroid.html#statusbarbackgroundcolor",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      }
    ],
    "TabBarIOS": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "barTintColor",
        "snippet": "barTintColor={$1}",
        "type": "attribute",
        "description": "Background color of the tab bar",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios.html#bartintcolor",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "tintColor",
        "snippet": "tintColor={$1}",
        "type": "attribute",
        "description": "Color of the currently selected tab icon",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios.html#tintcolor",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "translucent",
        "snippet": "translucent={$1}",
        "type": "attribute",
        "description": "A Boolean value that indicates whether the tab bar is translucent",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios.html#translucent",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "unselectedTintColor",
        "snippet": "unselectedTintColor={$1}",
        "type": "attribute",
        "description": "Color of text on unselected tabs",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios.html#unselectedtintcolor",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      }
    ],
    "Navigator": [
      {
        "displayText": "configureScene",
        "snippet": "configureScene={$1}",
        "type": "attribute",
        "description": "Optional function that allows configuration about scene animations andgestures. ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#configurescene",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "initialRoute",
        "snippet": "initialRoute={$1}",
        "type": "attribute",
        "description": "Specify a route to start on. A route is an object that the navigatorwill use to ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#initialroute",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "initialRouteStack",
        "snippet": "initialRouteStack={$1}",
        "type": "attribute",
        "description": "Provide a set of routes to initially mount. Required if no initialRouteis provid",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#initialroutestack",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "navigationBar",
        "snippet": "navigationBar={$1}",
        "type": "attribute",
        "description": "Optionally provide a component as navigation bar that persists across scenetrans",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#navigationbar",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "navigator",
        "snippet": "navigator={$1}",
        "type": "attribute",
        "description": "Optionally provide the navigator object from a parent Navigator",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#navigator",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onDidFocus",
        "snippet": "onDidFocus={$1}",
        "type": "attribute",
        "description": "Will be called with the new route of each scene after the transition iscomplete ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#ondidfocus",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onWillFocus",
        "snippet": "onWillFocus={$1}",
        "type": "attribute",
        "description": "Will emit the target route upon mounting and before each nav transition",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#onwillfocus",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderScene",
        "snippet": "renderScene={$1}",
        "type": "attribute",
        "description": "Required function which renders the scene for a given route. Will beinvoked with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#renderscene",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "sceneStyle",
        "snippet": "sceneStyle={$1}",
        "type": "attribute",
        "description": "Styles to apply to the container of each scene",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#scenestyle",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "immediatelyResetRouteStack(${1:nextRouteStack})",
        "type": "method",
        "description": "Reset every scene with an array of routes.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#immediatelyresetroutestack",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "jumpTo(${1:route})",
        "type": "method",
        "description": "Transition to an existing scene without unmounting",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#jumpto",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "jumpForward()",
        "type": "method",
        "description": "Jump forward to the next scene in the route stack.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#jumpforward",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "jumpBack()",
        "type": "method",
        "description": "Jump backward without unmounting the current scene.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#jumpback",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "push(${1:route})",
        "type": "method",
        "description": "Navigate forward to a new scene, squashing any scenes that you couldjumpForward ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#push",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "pop()",
        "type": "method",
        "description": "Transition back and unmount the current scene.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#pop",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "replaceAtIndex(${1:route}, ${2:index}, ${3:cb})",
        "type": "method",
        "description": "Replace a scene as specified by an index",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#replaceatindex",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "replace(${1:route})",
        "type": "method",
        "description": "Replace the current scene with a new route.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#replace",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "replacePrevious(${1:route})",
        "type": "method",
        "description": "Replace the previous scene.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#replaceprevious",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "popToTop()",
        "type": "method",
        "description": "Pop to the first scene in the stack, unmounting every other scene.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#poptotop",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "popToRoute(${1:route})",
        "type": "method",
        "description": "Pop to a particular scene, as specified by its route.All scenes after it will be",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#poptoroute",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "replacePreviousAndPop(${1:route})",
        "type": "method",
        "description": "Replace the previous scene and pop to it.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#replacepreviousandpop",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "resetTo(${1:route})",
        "type": "method",
        "description": "Navigate to a new scene and reset route stack.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#resetto",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "getCurrentRoutes()",
        "type": "method",
        "description": "Returns the current list of routes.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigator.html#getcurrentroutes",
        "rightLabelHTML": "react-native"
      }
    ],
    "RefreshControl": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "colors",
        "snippet": "colors={$1}",
        "type": "attribute",
        "description": "The colors (at least one) that will be used to draw the refresh indicator.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/refreshcontrol.html#colors",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "enabled",
        "snippet": "enabled={$1}",
        "type": "attribute",
        "description": "Whether the pull to refresh functionality is enabled.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/refreshcontrol.html#enabled",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onRefresh",
        "snippet": "onRefresh={$1}",
        "type": "attribute",
        "description": "Called when the view starts refreshing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/refreshcontrol.html#onrefresh",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "progressBackgroundColor",
        "snippet": "progressBackgroundColor={$1}",
        "type": "attribute",
        "description": "The background color of the refresh indicator.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/refreshcontrol.html#progressbackgroundcolor",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "progressViewOffset",
        "snippet": "progressViewOffset={$1}",
        "type": "attribute",
        "description": "Progress view top offset",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/refreshcontrol.html#progressviewoffset",
        "leftLabelHTML": "android:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "refreshing",
        "snippet": "refreshing={$1}",
        "type": "attribute",
        "description": "Whether the view should be indicating an active refresh.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/refreshcontrol.html#refreshing",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "tintColor",
        "snippet": "tintColor={$1}",
        "type": "attribute",
        "description": "The color of the refresh indicator.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/refreshcontrol.html#tintcolor",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "title",
        "snippet": "title=\"$1\"",
        "type": "attribute",
        "description": "The title displayed under the refresh indicator.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/refreshcontrol.html#title",
        "leftLabelHTML": "ios:string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "titleColor",
        "snippet": "titleColor={$1}",
        "type": "attribute",
        "description": "Title color.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/refreshcontrol.html#titlecolor",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      }
    ],
    "TouchableWithoutFeedback": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessibilitycomponenttype",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessibilitytraits",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayLongPress",
        "snippet": "delayLongPress={$1}",
        "type": "attribute",
        "description": "Delay in ms, from onPressIn, before onLongPress is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaylongpress",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayPressIn",
        "snippet": "delayPressIn={$1}",
        "type": "attribute",
        "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaypressin",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayPressOut",
        "snippet": "delayPressOut={$1}",
        "type": "attribute",
        "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaypressout",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "disabled",
        "snippet": "disabled={$1}",
        "type": "attribute",
        "description": "If true, disable all interactions for this component.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#disabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far your touch can start away from the button. This isadded to ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLongPress",
        "snippet": "onLongPress={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onlongpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPress",
        "snippet": "onPress={$1}",
        "type": "attribute",
        "description": "Called when the touch is released, but not if cancelled (e.g. by a scrollthat st",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPressIn",
        "snippet": "onPressIn={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpressin",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPressOut",
        "snippet": "onPressOut={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpressout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pressRetentionOffset",
        "snippet": "pressRetentionOffset={$1}",
        "type": "attribute",
        "description": "When the scroll view is disabled, this defines how far your touch maymove off of",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#pressretentionoffset",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      }
    ],
    "TouchableOpacity": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessibilitycomponenttype",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessibilitytraits",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "activeOpacity",
        "snippet": "activeOpacity={$1}",
        "type": "attribute",
        "description": "Determines what the opacity of the wrapped view should be when touch isactive. D",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchableopacity.html#activeopacity",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayLongPress",
        "snippet": "delayLongPress={$1}",
        "type": "attribute",
        "description": "Delay in ms, from onPressIn, before onLongPress is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaylongpress",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayPressIn",
        "snippet": "delayPressIn={$1}",
        "type": "attribute",
        "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaypressin",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayPressOut",
        "snippet": "delayPressOut={$1}",
        "type": "attribute",
        "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaypressout",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "disabled",
        "snippet": "disabled={$1}",
        "type": "attribute",
        "description": "If true, disable all interactions for this component.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#disabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far your touch can start away from the button. This isadded to ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLongPress",
        "snippet": "onLongPress={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onlongpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPress",
        "snippet": "onPress={$1}",
        "type": "attribute",
        "description": "Called when the touch is released, but not if cancelled (e.g. by a scrollthat st",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPressIn",
        "snippet": "onPressIn={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpressin",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPressOut",
        "snippet": "onPressOut={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpressout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pressRetentionOffset",
        "snippet": "pressRetentionOffset={$1}",
        "type": "attribute",
        "description": "When the scroll view is disabled, this defines how far your touch maymove off of",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#pressretentionoffset",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "setOpacityTo(${1:value})",
        "type": "method",
        "description": "Animate the touchable to a new opacity.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchableopacity.html#setopacityto",
        "rightLabelHTML": "react-native"
      }
    ],
    "ListView": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "alwaysBounceHorizontal",
        "snippet": "alwaysBounceHorizontal={$1}",
        "type": "attribute",
        "description": "When true, the scroll view bounces horizontally when it reaches the endeven if t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#alwaysbouncehorizontal",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "alwaysBounceVertical",
        "snippet": "alwaysBounceVertical={$1}",
        "type": "attribute",
        "description": "When true, the scroll view bounces vertically when it reaches the endeven if the",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#alwaysbouncevertical",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "automaticallyAdjustContentInsets",
        "snippet": "automaticallyAdjustContentInsets={$1}",
        "type": "attribute",
        "description": "Controls whether iOS should automatically adjust the content insetfor scroll vie",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#automaticallyadjustcontentinsets",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "bounces",
        "snippet": "bounces={$1}",
        "type": "attribute",
        "description": "When true, the scroll view bounces when it reaches the end of thecontent if the ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#bounces",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "bouncesZoom",
        "snippet": "bouncesZoom={$1}",
        "type": "attribute",
        "description": "When true, gestures can drive zoom past min/max and the zoom will animateto the ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#bounceszoom",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "canCancelContentTouches",
        "snippet": "canCancelContentTouches={$1}",
        "type": "attribute",
        "description": "When false, once tracking starts, won&apos;t try to drag if the touch moves.The ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#cancancelcontenttouches",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "centerContent",
        "snippet": "centerContent={$1}",
        "type": "attribute",
        "description": "When true, the scroll view automatically centers the content when thecontent is ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#centercontent",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "contentContainerStyle",
        "snippet": "contentContainerStyle={$1}",
        "type": "attribute",
        "description": "These styles will be applied to the scroll view content container whichwraps all",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#contentcontainerstyle",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "contentInset",
        "snippet": "contentInset={$1}",
        "type": "attribute",
        "description": "The amount by which the scroll view content is inset from the edgesof the scroll",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#contentinset",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "contentOffset",
        "snippet": "contentOffset={$1}",
        "type": "attribute",
        "description": "Used to manually set the starting scroll offset.The default value is {x: 0, y: 0",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#contentoffset",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "dataSource",
        "snippet": "dataSource={$1}",
        "type": "attribute",
        "description": "An instance of ListView.DataSource to use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#datasource",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "decelerationRate",
        "snippet": "decelerationRate=\"$1\"",
        "type": "attribute",
        "description": "A floating-point number that determines how quickly the scroll viewdecelerates a",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#decelerationrate",
        "leftLabelHTML": "ios:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "directionalLockEnabled",
        "snippet": "directionalLockEnabled={$1}",
        "type": "attribute",
        "description": "When true, the ScrollView will try to lock to only vertical or horizontalscrolli",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#directionallockenabled",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "enableEmptySections",
        "snippet": "enableEmptySections={$1}",
        "type": "attribute",
        "description": "Flag indicating whether empty section headers should be rendered. In the future ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#enableemptysections",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "endFillColor",
        "snippet": "endFillColor={$1}",
        "type": "attribute",
        "description": "Sometimes a scrollview takes up more space than its content fills. When this ist",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#endfillcolor",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "endRefreshing()",
        "type": "method",
        "description": "Deprecated. Use RefreshControl instead.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#endrefreshing",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "getMetrics()",
        "type": "method",
        "description": "Exports some data, e.g. for perf investigations or analytics.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#getmetrics",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "horizontal",
        "snippet": "horizontal={$1}",
        "type": "attribute",
        "description": "When true, the scroll view&apos;s children are arranged horizontally in a rowins",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#horizontal",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "indicatorStyle",
        "snippet": "indicatorStyle=\"$1\"",
        "type": "attribute",
        "description": "The style of the scroll indicators.  - default (the default), same as black.  - ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#indicatorstyle",
        "leftLabelHTML": "ios:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "initialListSize",
        "snippet": "initialListSize={$1}",
        "type": "attribute",
        "description": "How many rows to render on initial component mount.  Use this to makeit so that ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#initiallistsize",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "keyboardDismissMode",
        "snippet": "keyboardDismissMode=\"$1\"",
        "type": "attribute",
        "description": "Determines whether the keyboard gets dismissed in response to a drag.  - &apos;n",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#keyboarddismissmode",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "keyboardShouldPersistTaps",
        "snippet": "keyboardShouldPersistTaps={$1}",
        "type": "attribute",
        "description": "When false, tapping outside of the focused text input when the keyboardis up dis",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#keyboardshouldpersisttaps",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "maximumZoomScale",
        "snippet": "maximumZoomScale={$1}",
        "type": "attribute",
        "description": "The maximum allowed zoom scale. The default value is 1.0.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#maximumzoomscale",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "minimumZoomScale",
        "snippet": "minimumZoomScale={$1}",
        "type": "attribute",
        "description": "The minimum allowed zoom scale. The default value is 1.0.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#minimumzoomscale",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onChangeVisibleRows",
        "snippet": "onChangeVisibleRows={$1}",
        "type": "attribute",
        "description": "(visibleRows, changedRows) =&gt; void",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#onchangevisiblerows",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onContentSizeChange",
        "snippet": "onContentSizeChange={$1}",
        "type": "attribute",
        "description": "Called when scrollable content view of the ScrollView changes.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#oncontentsizechange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onEndReached",
        "snippet": "onEndReached={$1}",
        "type": "attribute",
        "description": "Called when all rows have been rendered and the list has been scrolledto within ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#onendreached",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onEndReachedThreshold",
        "snippet": "onEndReachedThreshold={$1}",
        "type": "attribute",
        "description": "Threshold in pixels (virtual, not physical) for calling onEndReached.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#onendreachedthreshold",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onRefreshStart",
        "snippet": "onRefreshStart={$1}",
        "type": "attribute",
        "description": "Use the refreshControl prop instead.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#onrefreshstart",
        "leftLabelHTML": "ios:function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onScroll",
        "snippet": "onScroll={$1}",
        "type": "attribute",
        "description": "Fires at most once per frame during scrolling. The frequency of theevents can be",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#onscroll",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onScrollAnimationEnd",
        "snippet": "onScrollAnimationEnd={$1}",
        "type": "attribute",
        "description": "Called when a scrolling animation ends.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#onscrollanimationend",
        "leftLabelHTML": "ios:function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pageSize",
        "snippet": "pageSize={$1}",
        "type": "attribute",
        "description": "Number of rows to render per event loop. Note: if your &apos;rows&apos; are actu",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#pagesize",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pagingEnabled",
        "snippet": "pagingEnabled={$1}",
        "type": "attribute",
        "description": "When true, the scroll view stops on multiples of the scroll view&apos;s sizewhen",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#pagingenabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "refreshControl",
        "snippet": "refreshControl={$1}",
        "type": "attribute",
        "description": "A RefreshControl component, used to provide pull-to-refreshfunctionality for the",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#refreshcontrol",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "Experimental: When true, offscreen child views (whose overflow value ishidden) a",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderFooter",
        "snippet": "renderFooter={$1}",
        "type": "attribute",
        "description": "() =&gt; renderable",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#renderfooter",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderHeader",
        "snippet": "renderHeader={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#renderheader",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderRow",
        "snippet": "renderRow={$1}",
        "type": "attribute",
        "description": "(rowData, sectionID, rowID, highlightRow) =&gt; renderable",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#renderrow",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderScrollComponent",
        "snippet": "renderScrollComponent={$1}",
        "type": "attribute",
        "description": "(props) =&gt; renderable",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#renderscrollcomponent",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderSectionHeader",
        "snippet": "renderSectionHeader={$1}",
        "type": "attribute",
        "description": "(sectionData, sectionID) =&gt; renderable",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#rendersectionheader",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderSeparator",
        "snippet": "renderSeparator={$1}",
        "type": "attribute",
        "description": "(sectionID, rowID, adjacentRowHighlighted) =&gt; renderable",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#renderseparator",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollEnabled",
        "snippet": "scrollEnabled={$1}",
        "type": "attribute",
        "description": "When false, the content does not scroll.The default value is true.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollenabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollEventThrottle",
        "snippet": "scrollEventThrottle={$1}",
        "type": "attribute",
        "description": "This controls how often the scroll event will be fired while scrolling(as a time",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrolleventthrottle",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollIndicatorInsets",
        "snippet": "scrollIndicatorInsets={$1}",
        "type": "attribute",
        "description": "The amount by which the scroll view indicators are inset from the edgesof the sc",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollindicatorinsets",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollPerfTag",
        "snippet": "scrollPerfTag=\"$1\"",
        "type": "attribute",
        "description": "Tag used to log scroll performance on this scroll view. Will forcemomentum event",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollperftag",
        "leftLabelHTML": "android:string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollRenderAheadDistance",
        "snippet": "scrollRenderAheadDistance={$1}",
        "type": "attribute",
        "description": "How early to start rendering rows before they come on screen, inpixels.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#scrollrenderaheaddistance",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollsToTop",
        "snippet": "scrollsToTop={$1}",
        "type": "attribute",
        "description": "When true, the scroll view scrolls to top when the status bar is tapped.The defa",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollstotop",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "scrollTo(${1:...args})",
        "type": "method",
        "description": "Scrolls to a given x, y offset, either immediately or with a smooth animation.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/listview.html#scrollto",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "scrollTo(${1:y}, ${2:y?}, ${3:animated?}, ${4:x}, ${5:animated})",
        "type": "method",
        "description": "Scrolls to a given x, y offset, either immediately or with a smooth animation.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollto",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "scrollWithoutAnimationTo(${1:y}, ${2:x})",
        "type": "method",
        "description": "Deprecated, do not use.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollwithoutanimationto",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "showsHorizontalScrollIndicator",
        "snippet": "showsHorizontalScrollIndicator={$1}",
        "type": "attribute",
        "description": "When true, shows a horizontal scroll indicator.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#showshorizontalscrollindicator",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "showsVerticalScrollIndicator",
        "snippet": "showsVerticalScrollIndicator={$1}",
        "type": "attribute",
        "description": "When true, shows a vertical scroll indicator.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#showsverticalscrollindicator",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "snapToAlignment",
        "snippet": "snapToAlignment=\"$1\"",
        "type": "attribute",
        "description": "When snapToInterval is set, snapToAlignment will define the relationshipof the s",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#snaptoalignment",
        "leftLabelHTML": "ios:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "snapToInterval",
        "snippet": "snapToInterval={$1}",
        "type": "attribute",
        "description": "When set, causes the scroll view to stop at multiples of the value ofsnapToInter",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#snaptointerval",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "stickyHeaderIndices",
        "snippet": "stickyHeaderIndices={$1}",
        "type": "attribute",
        "description": "An array of child indices determining which children get docked to thetop of the",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#stickyheaderindices",
        "leftLabelHTML": "ios:<span>[number]</span>",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "zoomScale",
        "snippet": "zoomScale={$1}",
        "type": "attribute",
        "description": "The current scale of the scroll view content. The default value is 1.0.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#zoomscale",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      }
    ],
    "DatePickerIOS": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "date",
        "snippet": "date={$1}",
        "type": "attribute",
        "description": "The currently selected date.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/datepickerios.html#date",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "maximumDate",
        "snippet": "maximumDate={$1}",
        "type": "attribute",
        "description": "Maximum date.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/datepickerios.html#maximumdate",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "minimumDate",
        "snippet": "minimumDate={$1}",
        "type": "attribute",
        "description": "Minimum date.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/datepickerios.html#minimumdate",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "minuteInterval",
        "snippet": "minuteInterval={$1}",
        "type": "attribute",
        "description": "The interval at which minutes can be selected.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/datepickerios.html#minuteinterval",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "mode",
        "snippet": "mode=\"$1\"",
        "type": "attribute",
        "description": "The date picker mode.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/datepickerios.html#mode",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onDateChange",
        "snippet": "onDateChange={$1}",
        "type": "attribute",
        "description": "Date change handler.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/datepickerios.html#ondatechange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "timeZoneOffsetInMinutes",
        "snippet": "timeZoneOffsetInMinutes={$1}",
        "type": "attribute",
        "description": "Timezone offset in minutes.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/datepickerios.html#timezoneoffsetinminutes",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      }
    ],
    "PickerIOS": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "itemStyle",
        "snippet": "itemStyle={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/pickerios.html#itemstyle",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onValueChange",
        "snippet": "onValueChange={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/pickerios.html#onvaluechange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "selectedValue",
        "snippet": "selectedValue={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/pickerios.html#selectedvalue",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      }
    ],
    "ToolbarAndroid": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "actions",
        "snippet": "actions=\"$1\"",
        "type": "attribute",
        "description": "Sets possible actions on the toolbar as part of the action menu. These are displ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#actions",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "contentInsetEnd",
        "snippet": "contentInsetEnd={$1}",
        "type": "attribute",
        "description": "Sets the content inset for the toolbar ending edge.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#contentinsetend",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "contentInsetStart",
        "snippet": "contentInsetStart={$1}",
        "type": "attribute",
        "description": "Sets the content inset for the toolbar starting edge.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#contentinsetstart",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "logo",
        "snippet": "logo={$1}",
        "type": "attribute",
        "description": "Sets the toolbar logo.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#logo",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "navIcon",
        "snippet": "navIcon={$1}",
        "type": "attribute",
        "description": "Sets the navigation icon.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#navicon",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onActionSelected",
        "snippet": "onActionSelected={$1}",
        "type": "attribute",
        "description": "Callback that is called when an action is selected. The only argument that is pa",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#onactionselected",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onIconClicked",
        "snippet": "onIconClicked={$1}",
        "type": "attribute",
        "description": "Callback called when the icon is selected.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#oniconclicked",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "overflowIcon",
        "snippet": "overflowIcon={$1}",
        "type": "attribute",
        "description": "Sets the overflow icon.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#overflowicon",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "rtl",
        "snippet": "rtl={$1}",
        "type": "attribute",
        "description": "Used to set the toolbar direction to RTL.In addition to this property you need t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#rtl",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "subtitle",
        "snippet": "subtitle=\"$1\"",
        "type": "attribute",
        "description": "Sets the toolbar subtitle.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#subtitle",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "subtitleColor",
        "snippet": "subtitleColor={$1}",
        "type": "attribute",
        "description": "Sets the toolbar subtitle color.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#subtitlecolor",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "title",
        "snippet": "title=\"$1\"",
        "type": "attribute",
        "description": "Sets the toolbar title.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#title",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "titleColor",
        "snippet": "titleColor={$1}",
        "type": "attribute",
        "description": "Sets the toolbar title color.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/toolbarandroid.html#titlecolor",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      }
    ],
    "ViewPagerAndroid": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "initialPage",
        "snippet": "initialPage={$1}",
        "type": "attribute",
        "description": "Index of initial page that should be selected. Use setPage method toupdate the p",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/viewpagerandroid.html#initialpage",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPageScroll",
        "snippet": "onPageScroll={$1}",
        "type": "attribute",
        "description": "Executed when transitioning between pages (ether because of animation forthe req",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/viewpagerandroid.html#onpagescroll",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPageScrollStateChanged",
        "snippet": "onPageScrollStateChanged={$1}",
        "type": "attribute",
        "description": "Function called when the page scrolling state has changed.The page scrolling sta",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/viewpagerandroid.html#onpagescrollstatechanged",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPageSelected",
        "snippet": "onPageSelected={$1}",
        "type": "attribute",
        "description": "This callback will be called once ViewPager finish navigating to selected page(w",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/viewpagerandroid.html#onpageselected",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pageMargin",
        "snippet": "pageMargin={$1}",
        "type": "attribute",
        "description": "Blank space to show between pages. This is only visible while scrolling, pages a",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/viewpagerandroid.html#pagemargin",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollEnabled",
        "snippet": "scrollEnabled={$1}",
        "type": "attribute",
        "description": "When false, the content does not scroll.The default value is true.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/viewpagerandroid.html#scrollenabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "setPage(${1:selectedPage})",
        "type": "method",
        "description": "A helper function to scroll to a specific page in the ViewPager.The transition b",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/viewpagerandroid.html#setpage",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "setPageWithoutAnimation(${1:selectedPage})",
        "type": "method",
        "description": "A helper function to scroll to a specific page in the ViewPager.The transition b",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/viewpagerandroid.html#setpagewithoutanimation",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      }
    ],
    "View": [
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      }
    ],
    "SliderIOS": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "disabled",
        "snippet": "disabled={$1}",
        "type": "attribute",
        "description": "If true the user won&apos;t be able to move the slider.Default value is false.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#disabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "maximumTrackImage",
        "snippet": "maximumTrackImage={$1}",
        "type": "attribute",
        "description": "Assigns a maximum track image. Only static images are supported. Theleftmost pix",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#maximumtrackimage",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "maximumTrackTintColor",
        "snippet": "maximumTrackTintColor=\"$1\"",
        "type": "attribute",
        "description": "The color used for the track to the right of the button. Overrides thedefault bl",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#maximumtracktintcolor",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "maximumValue",
        "snippet": "maximumValue={$1}",
        "type": "attribute",
        "description": "Initial maximum value of the slider. Default value is 1.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#maximumvalue",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "minimumTrackImage",
        "snippet": "minimumTrackImage={$1}",
        "type": "attribute",
        "description": "Assigns a minimum track image. Only static images are supported. Therightmost pi",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#minimumtrackimage",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "minimumTrackTintColor",
        "snippet": "minimumTrackTintColor=\"$1\"",
        "type": "attribute",
        "description": "The color used for the track to the left of the button. Overrides thedefault blu",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#minimumtracktintcolor",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "minimumValue",
        "snippet": "minimumValue={$1}",
        "type": "attribute",
        "description": "Initial minimum value of the slider. Default value is 0.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#minimumvalue",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onSlidingComplete",
        "snippet": "onSlidingComplete={$1}",
        "type": "attribute",
        "description": "Callback called when the user finishes changing the value (e.g. whenthe slider i",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#onslidingcomplete",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onValueChange",
        "snippet": "onValueChange={$1}",
        "type": "attribute",
        "description": "Callback continuously called while the user is dragging the slider.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#onvaluechange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "step",
        "snippet": "step={$1}",
        "type": "attribute",
        "description": "Step value of the slider. The value should bebetween 0 and (maximumValue - minim",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#step",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "thumbImage",
        "snippet": "thumbImage={$1}",
        "type": "attribute",
        "description": "Sets an image for the thumb. It only supports static images.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#thumbimage",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "trackImage",
        "snippet": "trackImage={$1}",
        "type": "attribute",
        "description": "Assigns a single image for the track. Only static images are supported.The cente",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#trackimage",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "value",
        "snippet": "value={$1}",
        "type": "attribute",
        "description": "Initial value of the slider. The value should be between minimumValueand maximum",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/sliderios.html#value",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      }
    ],
    "Image": [
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with{nativeEvent: {layout: {x, y, width, hei",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLoad",
        "snippet": "onLoad={$1}",
        "type": "attribute",
        "description": "Invoked when load completes successfully",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#onload",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLoadEnd",
        "snippet": "onLoadEnd={$1}",
        "type": "attribute",
        "description": "Invoked when load either succeeds or fails",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#onloadend",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLoadStart",
        "snippet": "onLoadStart={$1}",
        "type": "attribute",
        "description": "Invoked on load start",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#onloadstart",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "resizeMode",
        "snippet": "resizeMode=\"$1\"",
        "type": "attribute",
        "description": "Determines how to resize the image when the frame doesn&apos;t match the rawimag",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#resizemode",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "source",
        "snippet": "source=\"$1\"",
        "type": "attribute",
        "description": "uri is a string representing the resource identifier for the image, whichcould b",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#source",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "Changes the color of all the non-transparent pixels to the tintColor.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "A unique identifier for this element to be used in UI Automationtesting scripts.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "The text that&apos;s read by the screen reader when the user interacts withthe i",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#accessibilitylabel",
        "leftLabelHTML": "ios:string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates the image is an accessibility element.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#accessible",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "blurRadius",
        "snippet": "blurRadius={$1}",
        "type": "attribute",
        "description": "blurRadius: the blur radius of the blur filter added to the image",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#blurradius",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "capInsets",
        "snippet": "capInsets={$1}",
        "type": "attribute",
        "description": "When the image is resized, the corners of the size specifiedby capInsets will st",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#capinsets",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "defaultSource",
        "snippet": "defaultSource=\"$1\"",
        "type": "attribute",
        "description": "A static image to display while loading the image source.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#defaultsource",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onError",
        "snippet": "onError={$1}",
        "type": "attribute",
        "description": "Invoked on load error with {nativeEvent: {error}}",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#onerror",
        "leftLabelHTML": "ios:function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onProgress",
        "snippet": "onProgress={$1}",
        "type": "attribute",
        "description": "Invoked on download progress with {nativeEvent: {loaded, total}}",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#onprogress",
        "leftLabelHTML": "ios:function",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "getSize(${1:uri}, ${2:success}, ${3:height}, ${4:failure})",
        "type": "method",
        "description": "Retrieve the width and height (in pixels) of an image prior to displaying it.Thi",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#getsize",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "prefetch(${1:url})",
        "type": "method",
        "description": "Prefetches a remote image for later use by downloading it to the diskcache",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/image.html#prefetch",
        "rightLabelHTML": "react-native"
      }
    ],
    "Picker": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "enabled",
        "snippet": "enabled={$1}",
        "type": "attribute",
        "description": "If set to false, the picker will be disabled, i.e. the user will not be able to ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/picker.html#enabled",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "itemStyle",
        "snippet": "itemStyle={$1}",
        "type": "attribute",
        "description": "Style to apply to each of the item labels.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/picker.html#itemstyle",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onValueChange",
        "snippet": "onValueChange={$1}",
        "type": "attribute",
        "description": "Callback for when an item is selected. This is called with the following paramet",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/picker.html#onvaluechange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "prompt",
        "snippet": "prompt=\"$1\"",
        "type": "attribute",
        "description": "Prompt string for this picker, used on Android in dialog mode as the title of th",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/picker.html#prompt",
        "leftLabelHTML": "android:string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "selectedValue",
        "snippet": "selectedValue={$1}",
        "type": "attribute",
        "description": "Value matching value of one of the items. Can be a string or an integer.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/picker.html#selectedvalue",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      }
    ],
    "MapView": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "active",
        "snippet": "active={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#active",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "annotations",
        "snippet": "annotations=\"$1\"",
        "type": "attribute",
        "description": "Map annotations with title/subtitle.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#annotations",
        "leftLabelHTML": "ios:<span>[{latitude: number, longitude: number, animateDrop: bool, draggable: bool, onDragStateChange: function, onFocus: function, onBlur: function, title: string, subtitle: string, leftCalloutView: element, rightCalloutView: element, detailCalloutView: element, tintColor: [object Object], image: Image.propTypes.source, view: element, id: string, hasLeftCallout: deprecatedPropType(\n  React.PropTypes.bool,\n  &apos;Use `leftCalloutView` instead.&apos;\n), hasRightCallout: deprecatedPropType(\n  React.PropTypes.bool,\n  &apos;Use `rightCalloutView` instead.&apos;\n), onLeftCalloutPress: deprecatedPropType(\n  React.PropTypes.func,\n  &apos;Use `leftCalloutView` instead.&apos;\n), onRightCalloutPress: deprecatedPropType(\n  React.PropTypes.func,\n  &apos;Use `rightCalloutView` instead.&apos;\n)}]</span>",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "followUserLocation",
        "snippet": "followUserLocation={$1}",
        "type": "attribute",
        "description": "If true the map will follow the user&apos;s location whenever it changes.Note th",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#followuserlocation",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "legalLabelInsets",
        "snippet": "legalLabelInsets={$1}",
        "type": "attribute",
        "description": "Insets for the map&apos;s legal label, originally at bottom left of the map.See ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#legallabelinsets",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "mapType",
        "snippet": "mapType=\"$1\"",
        "type": "attribute",
        "description": "The map type to be displayed.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#maptype",
        "leftLabelHTML": "ios:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "maxDelta",
        "snippet": "maxDelta={$1}",
        "type": "attribute",
        "description": "Maximum size of area that can be displayed.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#maxdelta",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "minDelta",
        "snippet": "minDelta={$1}",
        "type": "attribute",
        "description": "Minimum size of area that can be displayed.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#mindelta",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAnnotationPress",
        "snippet": "onAnnotationPress={$1}",
        "type": "attribute",
        "description": "Deprecated. Use annotation onFocus and onBlur instead.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#onannotationpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onRegionChange",
        "snippet": "onRegionChange={$1}",
        "type": "attribute",
        "description": "Callback that is called continuously when the user is dragging the map.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#onregionchange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onRegionChangeComplete",
        "snippet": "onRegionChangeComplete={$1}",
        "type": "attribute",
        "description": "Callback that is called once, when the user is done moving the map.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#onregionchangecomplete",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "overlays",
        "snippet": "overlays=\"$1\"",
        "type": "attribute",
        "description": "Map overlays",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#overlays",
        "leftLabelHTML": "ios:<span>[{coordinates: [object Object], lineWidth: number, strokeColor: [object Object], fillColor: [object Object], id: string}]</span>",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pitchEnabled",
        "snippet": "pitchEnabled={$1}",
        "type": "attribute",
        "description": "When this property is set to true and a valid camera is associatedwith the map, ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#pitchenabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "region",
        "snippet": "region={$1}",
        "type": "attribute",
        "description": "The region to be displayed by the map.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#region",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "rotateEnabled",
        "snippet": "rotateEnabled={$1}",
        "type": "attribute",
        "description": "When this property is set to true and a valid camera is associated withthe map, ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#rotateenabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollEnabled",
        "snippet": "scrollEnabled={$1}",
        "type": "attribute",
        "description": "If false the user won&apos;t be able to change the map region being displayed.De",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#scrollenabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "showsCompass",
        "snippet": "showsCompass={$1}",
        "type": "attribute",
        "description": "If false compass won&apos;t be displayed on the map.Default value is true.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#showscompass",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "showsPointsOfInterest",
        "snippet": "showsPointsOfInterest={$1}",
        "type": "attribute",
        "description": "If false points of interest won&apos;t be displayed on the map.Default value is ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#showspointsofinterest",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "showsUserLocation",
        "snippet": "showsUserLocation={$1}",
        "type": "attribute",
        "description": "If true the app will ask for the user&apos;s location and display it onthe map. ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#showsuserlocation",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "zoomEnabled",
        "snippet": "zoomEnabled={$1}",
        "type": "attribute",
        "description": "If false the user won&apos;t be able to pinch/zoom the map.Default value is true",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/mapview.html#zoomenabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      }
    ],
    "WebView": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "allowsInlineMediaPlayback",
        "snippet": "allowsInlineMediaPlayback={$1}",
        "type": "attribute",
        "description": "Determines whether HTML5 videos play inline or use the native full-screencontrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#allowsinlinemediaplayback",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "automaticallyAdjustContentInsets",
        "snippet": "automaticallyAdjustContentInsets={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#automaticallyadjustcontentinsets",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "bounces",
        "snippet": "bounces={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#bounces",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "contentInset",
        "snippet": "contentInset={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#contentinset",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "decelerationRate",
        "snippet": "decelerationRate={$1}",
        "type": "attribute",
        "description": "A floating-point number that determines how quickly the scroll viewdecelerates a",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#decelerationrate",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "domStorageEnabled",
        "snippet": "domStorageEnabled={$1}",
        "type": "attribute",
        "description": "Used on Android only, controls whether DOM Storage is enabled or not",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#domstorageenabled",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "getWebViewHandle(${1:})",
        "type": "method",
        "description": "Returns the native webview node.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#getwebviewhandle",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "goBack()",
        "type": "method",
        "description": "Go back one page in the webview&apos;s history.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#goback",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "goForward()",
        "type": "method",
        "description": "Go forward one page in the webview&apos;s history.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#goforward",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "html",
        "snippet": "html=\"$1\"",
        "type": "attribute",
        "description": "Use the source prop instead.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#html",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "injectedJavaScript",
        "snippet": "injectedJavaScript=\"$1\"",
        "type": "attribute",
        "description": "Sets the JS to be injected when the webpage loads.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#injectedjavascript",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "javaScriptEnabled",
        "snippet": "javaScriptEnabled={$1}",
        "type": "attribute",
        "description": "Used on Android only, JS is enabled by default for WebView on iOS",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#javascriptenabled",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "mediaPlaybackRequiresUserAction",
        "snippet": "mediaPlaybackRequiresUserAction={$1}",
        "type": "attribute",
        "description": "Determines whether HTML5 audio &amp; videos require the user to tap before they ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#mediaplaybackrequiresuseraction",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onError",
        "snippet": "onError={$1}",
        "type": "attribute",
        "description": "Invoked when load fails",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#onerror",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLoad",
        "snippet": "onLoad={$1}",
        "type": "attribute",
        "description": "Invoked when load finish",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#onload",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLoadEnd",
        "snippet": "onLoadEnd={$1}",
        "type": "attribute",
        "description": "Invoked when load either succeeds or fails",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#onloadend",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLoadStart",
        "snippet": "onLoadStart={$1}",
        "type": "attribute",
        "description": "Invoked on load start",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#onloadstart",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onNavigationStateChange",
        "snippet": "onNavigationStateChange={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#onnavigationstatechange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onShouldStartLoadWithRequest",
        "snippet": "onShouldStartLoadWithRequest={$1}",
        "type": "attribute",
        "description": "Allows custom handling of any webview requests by a JS handler. Return trueor fa",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#onshouldstartloadwithrequest",
        "leftLabelHTML": "ios:function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "reload()",
        "type": "method",
        "description": "Reloads the current page.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#reload",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderError",
        "snippet": "renderError={$1}",
        "type": "attribute",
        "description": "Function that returns a view to show if there&apos;s an error.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#rendererror",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderLoading",
        "snippet": "renderLoading={$1}",
        "type": "attribute",
        "description": "Function that returns a loading indicator.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#renderloading",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scalesPageToFit",
        "snippet": "scalesPageToFit={$1}",
        "type": "attribute",
        "description": "Sets whether the webpage scales to fit the view and the user can change the scal",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#scalespagetofit",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollEnabled",
        "snippet": "scrollEnabled={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#scrollenabled",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "source",
        "snippet": "source=\"$1\"",
        "type": "attribute",
        "description": "Loads static html or a uri (with optional headers) in the WebView.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#source",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "startInLoadingState",
        "snippet": "startInLoadingState={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#startinloadingstate",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "stopLoading()",
        "type": "method",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#stoploading",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "url",
        "snippet": "url=\"$1\"",
        "type": "attribute",
        "description": "Use the source prop instead.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/webview.html#url",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      }
    ],
    "StatusBar": [
      {
        "displayText": "animated",
        "snippet": "animated={$1}",
        "type": "attribute",
        "description": "If the transition between status bar property changes should be animated.Support",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#animated",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hidden",
        "snippet": "hidden={$1}",
        "type": "attribute",
        "description": "If the status bar is hidden.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#hidden",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "backgroundColor",
        "snippet": "backgroundColor={$1}",
        "type": "attribute",
        "description": "The background color of the status bar.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#backgroundcolor",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "translucent",
        "snippet": "translucent={$1}",
        "type": "attribute",
        "description": "If the status bar is translucent.When translucent is set to true, the app will d",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#translucent",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "barStyle",
        "snippet": "barStyle=\"$1\"",
        "type": "attribute",
        "description": "Sets the color of the status bar text.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#barstyle",
        "leftLabelHTML": "ios:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "networkActivityIndicatorVisible",
        "snippet": "networkActivityIndicatorVisible={$1}",
        "type": "attribute",
        "description": "If the network activity indicator should be visible.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#networkactivityindicatorvisible",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "showHideTransition",
        "snippet": "showHideTransition=\"$1\"",
        "type": "attribute",
        "description": "The transition effect when showing and hiding the status bar using the hiddenpro",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#showhidetransition",
        "leftLabelHTML": "ios:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "setHidden(${1:hidden}, ${2:animation})",
        "type": "method",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#sethidden",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "setBarStyle(${1:style}, ${2:animated})",
        "type": "method",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#setbarstyle",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "setNetworkActivityIndicatorVisible(${1:visible})",
        "type": "method",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#setnetworkactivityindicatorvisible",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "setBackgroundColor(${1:color}, ${2:animated})",
        "type": "method",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#setbackgroundcolor",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "setTranslucent(${1:translucent})",
        "type": "method",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/statusbar.html#settranslucent",
        "rightLabelHTML": "react-native"
      }
    ],
    "TouchableHighlight": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessibilitycomponenttype",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessibilitytraits",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "activeOpacity",
        "snippet": "activeOpacity={$1}",
        "type": "attribute",
        "description": "Determines what the opacity of the wrapped view should be when touch isactive.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablehighlight.html#activeopacity",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayLongPress",
        "snippet": "delayLongPress={$1}",
        "type": "attribute",
        "description": "Delay in ms, from onPressIn, before onLongPress is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaylongpress",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayPressIn",
        "snippet": "delayPressIn={$1}",
        "type": "attribute",
        "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaypressin",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayPressOut",
        "snippet": "delayPressOut={$1}",
        "type": "attribute",
        "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaypressout",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "disabled",
        "snippet": "disabled={$1}",
        "type": "attribute",
        "description": "If true, disable all interactions for this component.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#disabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far your touch can start away from the button. This isadded to ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onHideUnderlay",
        "snippet": "onHideUnderlay={$1}",
        "type": "attribute",
        "description": "Called immediately after the underlay is hidden",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablehighlight.html#onhideunderlay",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLongPress",
        "snippet": "onLongPress={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onlongpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPress",
        "snippet": "onPress={$1}",
        "type": "attribute",
        "description": "Called when the touch is released, but not if cancelled (e.g. by a scrollthat st",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPressIn",
        "snippet": "onPressIn={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpressin",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPressOut",
        "snippet": "onPressOut={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpressout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onShowUnderlay",
        "snippet": "onShowUnderlay={$1}",
        "type": "attribute",
        "description": "Called immediately after the underlay is shown",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablehighlight.html#onshowunderlay",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pressRetentionOffset",
        "snippet": "pressRetentionOffset={$1}",
        "type": "attribute",
        "description": "When the scroll view is disabled, this defines how far your touch maymove off of",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#pressretentionoffset",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablehighlight.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "underlayColor",
        "snippet": "underlayColor={$1}",
        "type": "attribute",
        "description": "The color of the underlay that will show through when the touch isactive.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablehighlight.html#underlaycolor",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      }
    ],
    "TouchableNativeFeedback": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessibilitycomponenttype",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessibilitytraits",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "background",
        "snippet": "background={$1}",
        "type": "attribute",
        "description": "Determines the type of background drawable that&apos;s going to be used todispla",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablenativefeedback.html#background",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayLongPress",
        "snippet": "delayLongPress={$1}",
        "type": "attribute",
        "description": "Delay in ms, from onPressIn, before onLongPress is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaylongpress",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayPressIn",
        "snippet": "delayPressIn={$1}",
        "type": "attribute",
        "description": "Delay in ms, from the start of the touch, before onPressIn is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaypressin",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "delayPressOut",
        "snippet": "delayPressOut={$1}",
        "type": "attribute",
        "description": "Delay in ms, from the release of the touch, before onPressOut is called.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#delaypressout",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "disabled",
        "snippet": "disabled={$1}",
        "type": "attribute",
        "description": "If true, disable all interactions for this component.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#disabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far your touch can start away from the button. This isadded to ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLongPress",
        "snippet": "onLongPress={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onlongpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPress",
        "snippet": "onPress={$1}",
        "type": "attribute",
        "description": "Called when the touch is released, but not if cancelled (e.g. by a scrollthat st",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPressIn",
        "snippet": "onPressIn={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpressin",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPressOut",
        "snippet": "onPressOut={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#onpressout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pressRetentionOffset",
        "snippet": "pressRetentionOffset={$1}",
        "type": "attribute",
        "description": "When the scroll view is disabled, this defines how far your touch maymove off of",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#pressretentionoffset",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "Ripple(${1:color}, ${2:borderless})",
        "type": "method",
        "description": "Creates an object that represents ripple drawable with specified color (as astri",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablenativefeedback.html#ripple",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "SelectableBackground()",
        "type": "method",
        "description": "Creates an object that represents android theme&apos;s default background forsel",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablenativefeedback.html#selectablebackground",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "SelectableBackgroundBorderless()",
        "type": "method",
        "description": "Creates an object that represent android theme&apos;s default background for bor",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/touchablenativefeedback.html#selectablebackgroundborderless",
        "rightLabelHTML": "react-native"
      }
    ],
    "ProgressViewIOS": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "progress",
        "snippet": "progress={$1}",
        "type": "attribute",
        "description": "The progress value (between 0 and 1).",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/progressviewios.html#progress",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "progressImage",
        "snippet": "progressImage={$1}",
        "type": "attribute",
        "description": "A stretchable image to display as the progress bar.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/progressviewios.html#progressimage",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "progressTintColor",
        "snippet": "progressTintColor=\"$1\"",
        "type": "attribute",
        "description": "The tint color of the progress bar itself.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/progressviewios.html#progresstintcolor",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "progressViewStyle",
        "snippet": "progressViewStyle=\"$1\"",
        "type": "attribute",
        "description": "The progress bar style.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/progressviewios.html#progressviewstyle",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "trackImage",
        "snippet": "trackImage={$1}",
        "type": "attribute",
        "description": "A stretchable image to display behind the progress bar.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/progressviewios.html#trackimage",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "trackTintColor",
        "snippet": "trackTintColor=\"$1\"",
        "type": "attribute",
        "description": "The tint color of the progress bar track.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/progressviewios.html#tracktintcolor",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      }
    ],
    "Switch": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "disabled",
        "snippet": "disabled={$1}",
        "type": "attribute",
        "description": "If true the user won&apos;t be able to toggle the switch.Default value is false.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/switch.html#disabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onTintColor",
        "snippet": "onTintColor={$1}",
        "type": "attribute",
        "description": "Background color when the switch is turned on.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/switch.html#ontintcolor",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onValueChange",
        "snippet": "onValueChange={$1}",
        "type": "attribute",
        "description": "Invoked with the new value when the value changes.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/switch.html#onvaluechange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "thumbTintColor",
        "snippet": "thumbTintColor={$1}",
        "type": "attribute",
        "description": "Color of the foreground switch grip.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/switch.html#thumbtintcolor",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "tintColor",
        "snippet": "tintColor={$1}",
        "type": "attribute",
        "description": "Background color when the switch is turned off.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/switch.html#tintcolor",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "value",
        "snippet": "value={$1}",
        "type": "attribute",
        "description": "The value of the switch.  If true the switch will be turned on.Default value is ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/switch.html#value",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      }
    ],
    "TabBarIOS.Item": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "badge",
        "snippet": "badge=\"$1\"",
        "type": "attribute",
        "description": "Little red bubble that sits at the top right of the icon.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios-item.html#badge",
        "leftLabelHTML": "string, number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "icon",
        "snippet": "icon={$1}",
        "type": "attribute",
        "description": "A custom icon for the tab. It is ignored when a system icon is defined.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios-item.html#icon",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPress",
        "snippet": "onPress={$1}",
        "type": "attribute",
        "description": "Callback when this tab is being selected, you should change the state of yourcom",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios-item.html#onpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderAsOriginal",
        "snippet": "renderAsOriginal={$1}",
        "type": "attribute",
        "description": "If set to true it renders the image as original,it defaults to being displayed a",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios-item.html#renderasoriginal",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "selected",
        "snippet": "selected={$1}",
        "type": "attribute",
        "description": "It specifies whether the children are visible or not. If you see ablank content,",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios-item.html#selected",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "selectedIcon",
        "snippet": "selectedIcon={$1}",
        "type": "attribute",
        "description": "A custom icon when the tab is selected. It is ignored when a systemicon is defin",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios-item.html#selectedicon",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "systemIcon",
        "snippet": "systemIcon=\"$1\"",
        "type": "attribute",
        "description": "Items comes with a few predefined system icons. Note that if you areusing them, ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios-item.html#systemicon",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "title",
        "snippet": "title=\"$1\"",
        "type": "attribute",
        "description": "Text that appears under the icon. It is ignored when a system iconis defined.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/tabbarios-item.html#title",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      }
    ],
    "NavigatorIOS": [
      {
        "displayText": "barTintColor",
        "snippet": "barTintColor=\"$1\"",
        "type": "attribute",
        "description": "The default background color of the navigation bar",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#bartintcolor",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "initialRoute",
        "snippet": "initialRoute=\"$1\"",
        "type": "attribute",
        "description": "NavigatorIOS uses &quot;route&quot; objects to identify child views, their props",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#initialroute",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "interactivePopGestureEnabled",
        "snippet": "interactivePopGestureEnabled={$1}",
        "type": "attribute",
        "description": "A Boolean value that indicates whether the interactive pop gesture is enabled. U",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#interactivepopgestureenabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "itemWrapperStyle",
        "snippet": "itemWrapperStyle={$1}",
        "type": "attribute",
        "description": "The default wrapper style for components in the navigator.A common use case is t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#itemwrapperstyle",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "navigationBarHidden",
        "snippet": "navigationBarHidden={$1}",
        "type": "attribute",
        "description": "A Boolean value that indicates whether the navigation bar is hidden by default",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#navigationbarhidden",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shadowHidden",
        "snippet": "shadowHidden={$1}",
        "type": "attribute",
        "description": "A Boolean value that indicates whether to hide the 1px hairline shadow by defaul",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#shadowhidden",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "tintColor",
        "snippet": "tintColor=\"$1\"",
        "type": "attribute",
        "description": "The default color used for buttons in the navigation bar",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#tintcolor",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "titleTextColor",
        "snippet": "titleTextColor=\"$1\"",
        "type": "attribute",
        "description": "The default text color of the navigation bar title",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#titletextcolor",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "translucent",
        "snippet": "translucent={$1}",
        "type": "attribute",
        "description": "A Boolean value that indicates whether the navigation bar is translucent by defa",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#translucent",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "push(${1:route})",
        "type": "method",
        "description": "Navigate forward to a new route",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#push",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "popN(${1:n})",
        "type": "method",
        "description": "Go back N pages at once. When N=1, behavior matches pop()",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#popn",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "pop()",
        "type": "method",
        "description": "Go back one page",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#pop",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "replaceAtIndex(${1:route}, ${2:index})",
        "type": "method",
        "description": "Replace a route in the navigation stack.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#replaceatindex",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "replace(${1:route})",
        "type": "method",
        "description": "Replace the route for the current page and immediatelyload the view for the new ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#replace",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "replacePrevious(${1:route})",
        "type": "method",
        "description": "Replace the route/view for the previous page.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#replaceprevious",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "popToTop()",
        "type": "method",
        "description": "Go back to the top item",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#poptotop",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "popToRoute(${1:route})",
        "type": "method",
        "description": "Go back to the item for a particular route object",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#poptoroute",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "replacePreviousAndPop(${1:route})",
        "type": "method",
        "description": "Replaces the previous route/view and transitions back to it.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#replacepreviousandpop",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "resetTo(${1:route})",
        "type": "method",
        "description": "Replaces the top item and popToTop",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/navigatorios.html#resetto",
        "rightLabelHTML": "react-native"
      }
    ],
    "TextInput": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "autoCapitalize",
        "snippet": "autoCapitalize=\"$1\"",
        "type": "attribute",
        "description": "Can tell TextInput to automatically capitalize certain characters.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#autocapitalize",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "autoCorrect",
        "snippet": "autoCorrect={$1}",
        "type": "attribute",
        "description": "If false, disables auto-correct. The default value is true.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#autocorrect",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "autoFocus",
        "snippet": "autoFocus={$1}",
        "type": "attribute",
        "description": "If true, focuses the input on componentDidMount.The default value is false.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#autofocus",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "blurOnSubmit",
        "snippet": "blurOnSubmit={$1}",
        "type": "attribute",
        "description": "If true, the text field will blur when submitted.The default value is true for s",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#bluronsubmit",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "clear()",
        "type": "method",
        "description": "Removes all text from the input.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#clear",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "clearButtonMode",
        "snippet": "clearButtonMode=\"$1\"",
        "type": "attribute",
        "description": "When the clear button should appear on the right side of the text view",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#clearbuttonmode",
        "leftLabelHTML": "ios:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "clearTextOnFocus",
        "snippet": "clearTextOnFocus={$1}",
        "type": "attribute",
        "description": "If true, clears the text field automatically when editing begins",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#cleartextonfocus",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "defaultValue",
        "snippet": "defaultValue=\"$1\"",
        "type": "attribute",
        "description": "Provides an initial value that will change when the user starts typing.Useful fo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#defaultvalue",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "editable",
        "snippet": "editable={$1}",
        "type": "attribute",
        "description": "If false, text is not editable. The default value is true.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#editable",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "enablesReturnKeyAutomatically",
        "snippet": "enablesReturnKeyAutomatically={$1}",
        "type": "attribute",
        "description": "If true, the keyboard disables the return key when there is no text andautomatic",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#enablesreturnkeyautomatically",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "isFocused(${1:})",
        "type": "method",
        "description": "Returns if the input is currently focused.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#isfocused",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "keyboardAppearance",
        "snippet": "keyboardAppearance=\"$1\"",
        "type": "attribute",
        "description": "Determines the color of the keyboard.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#keyboardappearance",
        "leftLabelHTML": "ios:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "keyboardType",
        "snippet": "keyboardType=\"$1\"",
        "type": "attribute",
        "description": "Determines which keyboard to open, e.g.numeric.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#keyboardtype",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "maxLength",
        "snippet": "maxLength={$1}",
        "type": "attribute",
        "description": "Limits the maximum number of characters that can be entered. Use thisinstead of ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#maxlength",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "multiline",
        "snippet": "multiline={$1}",
        "type": "attribute",
        "description": "If true, the text input can be multiple lines.The default value is false.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#multiline",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "numberOfLines",
        "snippet": "numberOfLines={$1}",
        "type": "attribute",
        "description": "Sets the number of lines for a TextInput. Use it with multiline set totrue to be",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#numberoflines",
        "leftLabelHTML": "android:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onBlur",
        "snippet": "onBlur={$1}",
        "type": "attribute",
        "description": "Callback that is called when the text input is blurred",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#onblur",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onChange",
        "snippet": "onChange={$1}",
        "type": "attribute",
        "description": "Callback that is called when the text input&apos;s text changes.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#onchange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onChangeText",
        "snippet": "onChangeText={$1}",
        "type": "attribute",
        "description": "Callback that is called when the text input&apos;s text changes.Changed text is ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#onchangetext",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onEndEditing",
        "snippet": "onEndEditing={$1}",
        "type": "attribute",
        "description": "Callback that is called when text input ends.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#onendediting",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onFocus",
        "snippet": "onFocus={$1}",
        "type": "attribute",
        "description": "Callback that is called when the text input is focused",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#onfocus",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onKeyPress",
        "snippet": "onKeyPress={$1}",
        "type": "attribute",
        "description": "Callback that is called when a key is pressed.Pressed key value is passed as an ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#onkeypress",
        "leftLabelHTML": "ios:function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onSelectionChange",
        "snippet": "onSelectionChange={$1}",
        "type": "attribute",
        "description": "Callback that is called when the text input selection is changed",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#onselectionchange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onSubmitEditing",
        "snippet": "onSubmitEditing={$1}",
        "type": "attribute",
        "description": "Callback that is called when the text input&apos;s submit button is pressed.Inva",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#onsubmitediting",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "placeholder",
        "snippet": "placeholder=\"$1\"",
        "type": "attribute",
        "description": "The string that will be rendered before text input has been entered",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#placeholder",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "placeholderTextColor",
        "snippet": "placeholderTextColor=\"$1\"",
        "type": "attribute",
        "description": "The text color of the placeholder string",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#placeholdertextcolor",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "returnKeyLabel",
        "snippet": "returnKeyLabel=\"$1\"",
        "type": "attribute",
        "description": "Sets the return key to the label. Use it instead of returnKeyType.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#returnkeylabel",
        "leftLabelHTML": "android:string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "returnKeyType",
        "snippet": "returnKeyType=\"$1\"",
        "type": "attribute",
        "description": "Determines how the return key should look. On Android you can also usereturnKeyL",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#returnkeytype",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "secureTextEntry",
        "snippet": "secureTextEntry={$1}",
        "type": "attribute",
        "description": "If true, the text input obscures the text entered so that sensitive textlike pas",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#securetextentry",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "selectionColor",
        "snippet": "selectionColor=\"$1\"",
        "type": "attribute",
        "description": "The highlight (and cursor on ios) color of the text input",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#selectioncolor",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "selectionState",
        "snippet": "selectionState={$1}",
        "type": "attribute",
        "description": "See DocumentSelectionState.js, some state that is responsible formaintaining sel",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#selectionstate",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "selectTextOnFocus",
        "snippet": "selectTextOnFocus={$1}",
        "type": "attribute",
        "description": "If true, all text will automatically be selected on focus",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#selecttextonfocus",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "underlineColorAndroid",
        "snippet": "underlineColorAndroid=\"$1\"",
        "type": "attribute",
        "description": "The color of the textInput underline.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#underlinecolorandroid",
        "leftLabelHTML": "android:string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "value",
        "snippet": "value=\"$1\"",
        "type": "attribute",
        "description": "The value to show for the text input. TextInput is a controlledcomponent, which ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/textinput.html#value",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      }
    ],
    "ScrollView": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "alwaysBounceHorizontal",
        "snippet": "alwaysBounceHorizontal={$1}",
        "type": "attribute",
        "description": "When true, the scroll view bounces horizontally when it reaches the endeven if t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#alwaysbouncehorizontal",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "alwaysBounceVertical",
        "snippet": "alwaysBounceVertical={$1}",
        "type": "attribute",
        "description": "When true, the scroll view bounces vertically when it reaches the endeven if the",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#alwaysbouncevertical",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "automaticallyAdjustContentInsets",
        "snippet": "automaticallyAdjustContentInsets={$1}",
        "type": "attribute",
        "description": "Controls whether iOS should automatically adjust the content insetfor scroll vie",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#automaticallyadjustcontentinsets",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "bounces",
        "snippet": "bounces={$1}",
        "type": "attribute",
        "description": "When true, the scroll view bounces when it reaches the end of thecontent if the ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#bounces",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "bouncesZoom",
        "snippet": "bouncesZoom={$1}",
        "type": "attribute",
        "description": "When true, gestures can drive zoom past min/max and the zoom will animateto the ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#bounceszoom",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "canCancelContentTouches",
        "snippet": "canCancelContentTouches={$1}",
        "type": "attribute",
        "description": "When false, once tracking starts, won&apos;t try to drag if the touch moves.The ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#cancancelcontenttouches",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "centerContent",
        "snippet": "centerContent={$1}",
        "type": "attribute",
        "description": "When true, the scroll view automatically centers the content when thecontent is ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#centercontent",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "contentContainerStyle",
        "snippet": "contentContainerStyle={$1}",
        "type": "attribute",
        "description": "These styles will be applied to the scroll view content container whichwraps all",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#contentcontainerstyle",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "contentInset",
        "snippet": "contentInset={$1}",
        "type": "attribute",
        "description": "The amount by which the scroll view content is inset from the edgesof the scroll",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#contentinset",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "contentOffset",
        "snippet": "contentOffset={$1}",
        "type": "attribute",
        "description": "Used to manually set the starting scroll offset.The default value is {x: 0, y: 0",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#contentoffset",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "decelerationRate",
        "snippet": "decelerationRate=\"$1\"",
        "type": "attribute",
        "description": "A floating-point number that determines how quickly the scroll viewdecelerates a",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#decelerationrate",
        "leftLabelHTML": "ios:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "directionalLockEnabled",
        "snippet": "directionalLockEnabled={$1}",
        "type": "attribute",
        "description": "When true, the ScrollView will try to lock to only vertical or horizontalscrolli",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#directionallockenabled",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "endFillColor",
        "snippet": "endFillColor={$1}",
        "type": "attribute",
        "description": "Sometimes a scrollview takes up more space than its content fills. When this ist",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#endfillcolor",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "endRefreshing()",
        "type": "method",
        "description": "Deprecated. Use RefreshControl instead.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#endrefreshing",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "horizontal",
        "snippet": "horizontal={$1}",
        "type": "attribute",
        "description": "When true, the scroll view&apos;s children are arranged horizontally in a rowins",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#horizontal",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "indicatorStyle",
        "snippet": "indicatorStyle=\"$1\"",
        "type": "attribute",
        "description": "The style of the scroll indicators.  - default (the default), same as black.  - ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#indicatorstyle",
        "leftLabelHTML": "ios:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "keyboardDismissMode",
        "snippet": "keyboardDismissMode=\"$1\"",
        "type": "attribute",
        "description": "Determines whether the keyboard gets dismissed in response to a drag.  - &apos;n",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#keyboarddismissmode",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "keyboardShouldPersistTaps",
        "snippet": "keyboardShouldPersistTaps={$1}",
        "type": "attribute",
        "description": "When false, tapping outside of the focused text input when the keyboardis up dis",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#keyboardshouldpersisttaps",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "maximumZoomScale",
        "snippet": "maximumZoomScale={$1}",
        "type": "attribute",
        "description": "The maximum allowed zoom scale. The default value is 1.0.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#maximumzoomscale",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "minimumZoomScale",
        "snippet": "minimumZoomScale={$1}",
        "type": "attribute",
        "description": "The minimum allowed zoom scale. The default value is 1.0.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#minimumzoomscale",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onContentSizeChange",
        "snippet": "onContentSizeChange={$1}",
        "type": "attribute",
        "description": "Called when scrollable content view of the ScrollView changes.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#oncontentsizechange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onRefreshStart",
        "snippet": "onRefreshStart={$1}",
        "type": "attribute",
        "description": "Use the refreshControl prop instead.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#onrefreshstart",
        "leftLabelHTML": "ios:function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onScroll",
        "snippet": "onScroll={$1}",
        "type": "attribute",
        "description": "Fires at most once per frame during scrolling. The frequency of theevents can be",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#onscroll",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onScrollAnimationEnd",
        "snippet": "onScrollAnimationEnd={$1}",
        "type": "attribute",
        "description": "Called when a scrolling animation ends.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#onscrollanimationend",
        "leftLabelHTML": "ios:function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pagingEnabled",
        "snippet": "pagingEnabled={$1}",
        "type": "attribute",
        "description": "When true, the scroll view stops on multiples of the scroll view&apos;s sizewhen",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#pagingenabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "refreshControl",
        "snippet": "refreshControl={$1}",
        "type": "attribute",
        "description": "A RefreshControl component, used to provide pull-to-refreshfunctionality for the",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#refreshcontrol",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollEnabled",
        "snippet": "scrollEnabled={$1}",
        "type": "attribute",
        "description": "When false, the content does not scroll.The default value is true.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollenabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollEventThrottle",
        "snippet": "scrollEventThrottle={$1}",
        "type": "attribute",
        "description": "This controls how often the scroll event will be fired while scrolling(as a time",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrolleventthrottle",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollIndicatorInsets",
        "snippet": "scrollIndicatorInsets={$1}",
        "type": "attribute",
        "description": "The amount by which the scroll view indicators are inset from the edgesof the sc",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollindicatorinsets",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollPerfTag",
        "snippet": "scrollPerfTag=\"$1\"",
        "type": "attribute",
        "description": "Tag used to log scroll performance on this scroll view. Will forcemomentum event",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollperftag",
        "leftLabelHTML": "android:string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "scrollsToTop",
        "snippet": "scrollsToTop={$1}",
        "type": "attribute",
        "description": "When true, the scroll view scrolls to top when the status bar is tapped.The defa",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollstotop",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "scrollTo(${1:y}, ${2:y?}, ${3:animated?}, ${4:x}, ${5:animated})",
        "type": "method",
        "description": "Scrolls to a given x, y offset, either immediately or with a smooth animation.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollto",
        "rightLabelHTML": "react-native"
      },
      {
        "snippet": "scrollWithoutAnimationTo(${1:y}, ${2:x})",
        "type": "method",
        "description": "Deprecated, do not use.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#scrollwithoutanimationto",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "showsHorizontalScrollIndicator",
        "snippet": "showsHorizontalScrollIndicator={$1}",
        "type": "attribute",
        "description": "When true, shows a horizontal scroll indicator.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#showshorizontalscrollindicator",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "showsVerticalScrollIndicator",
        "snippet": "showsVerticalScrollIndicator={$1}",
        "type": "attribute",
        "description": "When true, shows a vertical scroll indicator.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#showsverticalscrollindicator",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "snapToAlignment",
        "snippet": "snapToAlignment=\"$1\"",
        "type": "attribute",
        "description": "When snapToInterval is set, snapToAlignment will define the relationshipof the s",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#snaptoalignment",
        "leftLabelHTML": "ios:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "snapToInterval",
        "snippet": "snapToInterval={$1}",
        "type": "attribute",
        "description": "When set, causes the scroll view to stop at multiples of the value ofsnapToInter",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#snaptointerval",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "stickyHeaderIndices",
        "snippet": "stickyHeaderIndices={$1}",
        "type": "attribute",
        "description": "An array of child indices determining which children get docked to thetop of the",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#stickyheaderindices",
        "leftLabelHTML": "ios:<span>[number]</span>",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "zoomScale",
        "snippet": "zoomScale={$1}",
        "type": "attribute",
        "description": "The current scale of the scroll view content. The default value is 1.0.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/scrollview.html#zoomscale",
        "leftLabelHTML": "ios:number",
        "rightLabelHTML": "react-native"
      }
    ],
    "Modal": [
      {
        "displayText": "animated",
        "snippet": "animated={$1}",
        "type": "attribute",
        "description": "Use the animationType prop instead.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/modal.html#animated",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "animationType",
        "snippet": "animationType=\"$1\"",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/modal.html#animationtype",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onRequestClose",
        "snippet": "onRequestClose={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/modal.html#onrequestclose",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onShow",
        "snippet": "onShow={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/modal.html#onshow",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "transparent",
        "snippet": "transparent={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/modal.html#transparent",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "visible",
        "snippet": "visible={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/modal.html#visible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      }
    ],
    "SegmentedControlIOS": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "enabled",
        "snippet": "enabled={$1}",
        "type": "attribute",
        "description": "If false the user won&apos;t be able to interact with the control.Default value ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/segmentedcontrolios.html#enabled",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "momentary",
        "snippet": "momentary={$1}",
        "type": "attribute",
        "description": "If true, then selecting a segment won&apos;t persist visually.The onValueChange ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/segmentedcontrolios.html#momentary",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onChange",
        "snippet": "onChange={$1}",
        "type": "attribute",
        "description": "Callback that is called when the user taps a segment;passes the event as an argu",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/segmentedcontrolios.html#onchange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onValueChange",
        "snippet": "onValueChange={$1}",
        "type": "attribute",
        "description": "Callback that is called when the user taps a segment;passes the segment&apos;s v",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/segmentedcontrolios.html#onvaluechange",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "selectedIndex",
        "snippet": "selectedIndex={$1}",
        "type": "attribute",
        "description": "The index in props.values of the segment to be (pre)selected.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/segmentedcontrolios.html#selectedindex",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "tintColor",
        "snippet": "tintColor=\"$1\"",
        "type": "attribute",
        "description": "Accent color of the control.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/segmentedcontrolios.html#tintcolor",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "values",
        "snippet": "values=\"$1\"",
        "type": "attribute",
        "description": "The labels for the control&apos;s segment buttons, in order.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/segmentedcontrolios.html#values",
        "leftLabelHTML": "<span>[string]</span>",
        "rightLabelHTML": "react-native"
      }
    ],
    "Text": [
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/text.html#accessible",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "numberOfLines",
        "snippet": "numberOfLines={$1}",
        "type": "attribute",
        "description": "Used to truncate the text with an ellipsis after computing the textlayout, inclu",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/text.html#numberoflines",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/text.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLongPress",
        "snippet": "onLongPress={$1}",
        "type": "attribute",
        "description": "This function is called on long press.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/text.html#onlongpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onPress",
        "snippet": "onPress={$1}",
        "type": "attribute",
        "description": "This function is called on press.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/text.html#onpress",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "Specifies font weight. The values &apos;normal&apos; and &apos;bold&apos; are su",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/text.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/text.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "allowFontScaling",
        "snippet": "allowFontScaling={$1}",
        "type": "attribute",
        "description": "Specifies should fonts scale to respect Text Size accessibility setting on iOS.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/text.html#allowfontscaling",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "suppressHighlighting",
        "snippet": "suppressHighlighting={$1}",
        "type": "attribute",
        "description": "When true, no visual change is made when text is pressed down. Bydefault, a gray",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/text.html#suppresshighlighting",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      }
    ],
    "ProgressBarAndroid": [
      {
        "displayText": "accessibilityComponentType",
        "snippet": "accessibilityComponentType={$1}",
        "type": "attribute",
        "description": "Indicates to accessibility services to treat UI component like anative one. Work",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitycomponenttype",
        "leftLabelHTML": "android:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLabel",
        "snippet": "accessibilityLabel=\"$1\"",
        "type": "attribute",
        "description": "Overrides the text that&apos;s read by the screen reader when the user interacts",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitylabel",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityLiveRegion",
        "snippet": "accessibilityLiveRegion=\"$1\"",
        "type": "attribute",
        "description": "Indicates to accessibility services whether the user should be notifiedwhen this",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessibilityTraits",
        "snippet": "accessibilityTraits={$1}",
        "type": "attribute",
        "description": "Provides additional traits to screen reader. By default no traits areprovided un",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessibilitytraits",
        "leftLabelHTML": "ios:object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "accessible",
        "snippet": "accessible={$1}",
        "type": "attribute",
        "description": "When true, indicates that the view is an accessibility element. By default,all t",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#accessible",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "collapsable",
        "snippet": "collapsable={$1}",
        "type": "attribute",
        "description": "Views that are only used to layout their children or otherwise don&apos;t drawan",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#collapsable",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "color",
        "snippet": "color={$1}",
        "type": "attribute",
        "description": "Color of the progress bar.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/progressbarandroid.html#color",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "hitSlop",
        "snippet": "hitSlop={$1}",
        "type": "attribute",
        "description": "This defines how far a touch event can start away from the view.Typical interfac",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#hitslop",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "importantForAccessibility",
        "snippet": "importantForAccessibility=\"$1\"",
        "type": "attribute",
        "description": "Controls how view is important for accessibility which is if itfires accessibili",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#importantforaccessibility",
        "leftLabelHTML": "android:enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "indeterminate",
        "snippet": "indeterminate={$1}",
        "type": "attribute",
        "description": "If the progress bar will show indeterminate progress. Note that thiscan only be ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/progressbarandroid.html#indeterminate",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "needsOffscreenAlphaCompositing",
        "snippet": "needsOffscreenAlphaCompositing={$1}",
        "type": "attribute",
        "description": "Whether this view needs to rendered offscreen and composited with an alphain ord",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onAccessibilityTap",
        "snippet": "onAccessibilityTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will try to invoke this functionwhen the use",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onLayout",
        "snippet": "onLayout={$1}",
        "type": "attribute",
        "description": "Invoked on mount and layout changes with",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onlayout",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMagicTap",
        "snippet": "onMagicTap={$1}",
        "type": "attribute",
        "description": "When accessible is true, the system will invoke this function when theuser perfo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmagictap",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponder",
        "snippet": "onMoveShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onMoveShouldSetResponderCapture",
        "snippet": "onMoveShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderGrant",
        "snippet": "onResponderGrant={$1}",
        "type": "attribute",
        "description": "For most touch interactions, you&apos;ll simply want to wrap your component inTo",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondergrant",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderMove",
        "snippet": "onResponderMove={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onrespondermove",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderReject",
        "snippet": "onResponderReject={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderreject",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderRelease",
        "snippet": "onResponderRelease={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderrelease",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminate",
        "snippet": "onResponderTerminate={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminate",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onResponderTerminationRequest",
        "snippet": "onResponderTerminationRequest={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponder",
        "snippet": "onStartShouldSetResponder={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "onStartShouldSetResponderCapture",
        "snippet": "onStartShouldSetResponderCapture={$1}",
        "type": "attribute",
        "description": " ",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture",
        "leftLabelHTML": "function",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "pointerEvents",
        "snippet": "pointerEvents=\"$1\"",
        "type": "attribute",
        "description": "Controls whether the View can be the target of touch events.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#pointerevents",
        "leftLabelHTML": "enum",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "progress",
        "snippet": "progress={$1}",
        "type": "attribute",
        "description": "The progress value (between 0 and 1).",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/progressbarandroid.html#progress",
        "leftLabelHTML": "number",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "removeClippedSubviews",
        "snippet": "removeClippedSubviews={$1}",
        "type": "attribute",
        "description": "This is a special performance property exposed by RCTView and is usefulfor scrol",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews",
        "leftLabelHTML": "bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "renderToHardwareTextureAndroid",
        "snippet": "renderToHardwareTextureAndroid={$1}",
        "type": "attribute",
        "description": "Whether this view should render itself (and all of its children) into asingle ha",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid",
        "leftLabelHTML": "android:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "shouldRasterizeIOS",
        "snippet": "shouldRasterizeIOS={$1}",
        "type": "attribute",
        "description": "Whether this view should be rendered as a bitmap before compositing.",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios",
        "leftLabelHTML": "ios:bool",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "style",
        "snippet": "style={$1}",
        "type": "attribute",
        "description": "(Android-only) Sets the elevation of a view, using Android&apos;s underlyingelev",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#style",
        "leftLabelHTML": "style",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "styleAttr",
        "snippet": "styleAttr={$1}",
        "type": "attribute",
        "description": "Style of the ProgressBar. One of:",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/progressbarandroid.html#styleattr",
        "leftLabelHTML": "object",
        "rightLabelHTML": "react-native"
      },
      {
        "displayText": "testID",
        "snippet": "testID=\"$1\"",
        "type": "attribute",
        "description": "Used to locate this view in end-to-end tests. NB: disables the &apos;layout-only",
        "descriptionMoreURL": "http://facebook.github.io/react-native/docs/view.html#testid",
        "leftLabelHTML": "string",
        "rightLabelHTML": "react-native"
      }
    ]
  },
  "values": {
    "size": [
      "large",
      "small"
    ],
    "drawerLockMode": [
      "locked-closed",
      "locked-open",
      "unlocked"
    ],
    "drawerPosition": [
      "DrawerConsts.DrawerPosition.Left",
      "DrawerConsts.DrawerPosition.Right"
    ],
    "keyboardDismissMode": [
      "interactive",
      "none",
      "on-drag"
    ],
    "minuteInterval": [
      "1",
      "10",
      "12",
      "15",
      "2",
      "20",
      "3",
      "30",
      "4",
      "5",
      "6"
    ],
    "mode": [
      "date",
      "datetime",
      "time"
    ],
    "actions": [
      "always",
      "ifRoom",
      "never"
    ],
    "pointerEvents": [
      "auto",
      "box-none",
      "box-only",
      "none"
    ],
    "accessibilityLiveRegion": [
      "assertive",
      "none",
      "polite"
    ],
    "importantForAccessibility": [
      "auto",
      "no",
      "no-hide-descendants",
      "yes"
    ],
    "resizeMode": [
      "contain",
      "cover",
      "stretch"
    ],
    "mapType": [
      "hybrid",
      "satellite",
      "standard"
    ],
    "barStyle": [
      "default",
      "light-content"
    ],
    "showHideTransition": [
      "fade",
      "slide"
    ],
    "progressViewStyle": [
      "bar",
      "default"
    ],
    "systemIcon": [
      "bookmarks",
      "contacts",
      "downloads",
      "favorites",
      "featured",
      "history",
      "more",
      "most-recent",
      "most-viewed",
      "recents",
      "search",
      "top-rated"
    ],
    "autoCapitalize": [
      "characters",
      "none",
      "sentences",
      "words"
    ],
    "keyboardType": [
      "ascii-capable",
      "decimal-pad",
      "default",
      "email-address",
      "name-phone-pad",
      "number-pad",
      "numbers-and-punctuation",
      "numeric",
      "phone-pad",
      "twitter",
      "url",
      "web-search"
    ],
    "returnKeyType": [
      "default",
      "done",
      "emergency-call",
      "go",
      "google",
      "join",
      "next",
      "none",
      "previous",
      "route",
      "search",
      "send",
      "yahoo"
    ],
    "clearButtonMode": [
      "always",
      "never",
      "unless-editing",
      "while-editing"
    ],
    "keyboardAppearance": [
      "dark",
      "default",
      "light"
    ],
    "decelerationRate": [
      "fast",
      "normal"
    ],
    "indicatorStyle": [
      "black",
      "default",
      "white"
    ],
    "snapToAlignment": [
      "center",
      "end",
      "start"
    ],
    "animationType": [
      "fade",
      "none",
      "slide"
    ]
  },
  "extend": {}
}